mutate(datasci_scaled = datasci_number/10000)
ggplot(aes(x = Year, y = datasci_scaled, fill = Sex)) +
geom_bar(stat = "identity", position = "dodge") +
facet_grid(SE~Degree, scales = "free_y") +
labs(y = "Number of Degrees (10,000)", title = "Number of Data Science Degrees Conferred by Degree Type and Sex Over Time")
plot_datasci <- datasci %>%
mutate(datasci_scaled = datasci_number/10000)
ggplot(aes(x = Year, y = datasci_scaled, fill = Sex)) +
geom_bar(stat = "identity", position = "dodge") +
facet_grid(Degree~., scales = "free_y") +
labs(y = "Number of Degrees (10,000)", title = "Number of Data Science Degrees Conferred by Degree Type and Sex Over Time")
plot_datasci <- datasci %>%
mutate(datasci_scaled = datasci_number/10000) %>%
ggplot(aes(x = Year, y = datasci_scaled, fill = Sex)) +
geom_bar(stat = "identity", position = "dodge") +
facet_grid(Degree~., scales = "free_y") +
labs(y = "Number of Degrees (10,000)", title = "Number of Data Science Degrees Conferred by Degree Type and Sex Over Time")
plot_datasci
#Proportion of women in data science (combines computer science and math/statistics)
women_datasci <- women %>%
mutate(datasci = ifelse(Field == "Computer sciences", "yes", ifelse(Field == "Mathematics & statistics", "yes", "no"))) %>%
group_by(datasci, Sex, Year, Degree) %>%
summarise(datasci_number = sum(Number)) %>%
group_by(datasci, Year, Degree) %>%
mutate(ratio = datasci_number / sum(datasci_number)) %>%
filter(Sex == "Female" & datasci == "yes")
plot_women_datasci <- women_datasci %>%
ggplot(aes(x = Year, y = ratio, color = Degree)) +
geom_point() + geom_line() +
labs(title = "Proportion of Women Obtaining Data Science Degrees Over Time")
plot_women_datasci
#Number of degrees in data science by sex
datasci <- women %>%
mutate(datasci = ifelse(Field == "Computer sciences", "yes", ifelse(Field == "Mathematics & statistics", "yes", "no"))) %>%
group_by(datasci, Sex, Year, Degree) %>%
summarise(datasci_number = sum(Number)) %>%
group_by(datasci, Year, Degree) %>%
mutate(ratio = datasci_number / sum(datasci_number)) %>%
filter(datasci == "yes")
plot_datasci <- datasci %>%
mutate(datasci_scaled = datasci_number/10000) %>%
ggplot(aes(x = Year, y = datasci_scaled, fill = Sex)) +
geom_bar(stat = "identity", position = "dodge") +
facet_grid(Degree~., scales = "free_y") +
labs(y = "Number of Degrees (10,000)", title = "Number of Data Science Degrees Conferred by Degree Type and Sex Over Time")
plot_datasci
#Proportion female in SE/non-SE fields by year
women_prop <- women %>%
mutate(SE = ifelse(Field!="Non-S&E" , "S&E", "Non-S&E")) %>%
group_by(SE, Sex, Year) %>%
summarise(SE_number = sum(Number)) %>%
group_by(SE, Year) %>%
mutate(ratio = SE_number / sum(SE_number)) %>%
filter(Sex == "Female")
pander(women_prop)
plot_propf <- women_prop %>% ggplot(aes(x = Year, y = ratio, color = SE)) +
geom_point() + geom_line() +
ggtitle("Proportion of females obtaining SE/non-SE degrees over time")
plot_propf
#Proportion female in SE/non-SE fields by degree and year
women_prop_deg <- women %>%
mutate(SE = ifelse(Field!="Non-S&E" , "S&E", "Non-S&E")) %>%
group_by(SE, Sex, Degree, Year) %>%
summarise(SE_number = sum(Number)) %>%
group_by(SE, Degree, Year) %>%
mutate(ratio = SE_number / sum(SE_number)) %>%
filter(Sex == "Female")
pander(women_prop_deg)
plot_propf_deg <- women_prop_deg %>% ggplot(aes(x = Year, y = ratio, color = SE)) +
geom_point() + geom_line() +
facet_grid(Degree~., scales = "free_y") +
ggtitle("Proportion of females obtaining SE/non-SE degrees over time, by degree type")
plot_propf_deg
#Both sexes, SE/non-SE fields over time by degree and year. Number of degrees scaled to 10,000
women_deg <- women %>%
mutate(SE = ifelse(Field!="Non-S&E" , "S&E", "Non-S&E"), num_scaled = Number/10000) %>%
group_by(SE, Sex, Degree, Year) %>%
summarise(SE_number = sum(num_scaled))
pander(women_deg)
plot_deg <- women_deg %>% ggplot(aes(x = Year, y = SE_number, fill = Sex)) +
geom_bar(stat = "identity", position = "dodge") +
facet_grid(SE~Degree, scales = "free_y") +
labs(y = "Number of Degrees (10,000)", title = "Number of Degrees Conferred by Degree Type, Field, and Sex Over Time")
plot_deg
knitr::opts_chunk$set(echo = TRUE, fig.width=8, fig.height=4)
options(scipen = 0, digits = 3)  # controls base R output
if(!require('pacman')) {
install.packages('pacman')
}
pacman::p_load(ggplot2, dplyr, tidyverse, gridExtra, ggrepel, plotly, skimr, tidytext)
# install a package if it does not exist already and put the package in the path (library)
# dplyr, ggplot2,tidyr
# install.packages('ggplot2')
#library(ggplot2)
# convert character to integer for datatype of age and worktime for calculation
results$age = as.integer(as.character(results$age))
survey_results <- read.csv("data/Survey_results_final.csv")
results <-
survey_results %>%
# select only the variables Age, Gender, Education Level, Household Income in 2013, Sirius Listener?, Wharton Listener? and Time used to finish the survey
select(Answer.Age, Answer.Gender, Answer.Education, Answer.HouseHoldIncome, Answer.Sirius.Radio, Answer.Wharton.Radio, WorkTimeInSeconds) %>%
# change the variable names to be "age", "gender", "education", "income", "sirius", "wharton", "worktime"
rename(age = Answer.Age, gender = Answer.Gender, education = Answer.Education, income = Answer.HouseHoldIncome, sirius = Answer.Sirius.Radio, wharton = Answer.Wharton.Radio, worktime = WorkTimeInSeconds) %>%
# omit any row with NA because they will introduce noise into our data
na.omit()
names(results)
str(results)
# get datatype of each column so we can convert them back to original datatype later on
print(class(results$age))
print(class(results$gender))
print(class(results$education))
print(class(results$income))
print(class(results$sirius))
print(class(results$wharton))
print(class(results$worktime))
# we want to see what kinds of results are available for each variable
results$age <- as.factor(results$age)
results$gender <- as.factor(results$gender)
results$education <- as.factor(results$education)
results$income <- as.factor(results$income)
results$sirius <- as.factor(results$sirius)
results$wharton <- as.factor(results$wharton)
results$worktime <- as.factor(results$worktime)
summary(results)
results %>%
# view rows with incomplete data
filter(age == "" | gender == "" | education == "" | income == "" | sirius == "" | wharton == "" | worktime == "")
results <- results %>%
# keep only the rows that are not empty
filter(age != "", gender != "", education != "", income != "", sirius != "", wharton != "", worktime != "") %>%
# remove rows with incorrect data entry
filter(education != "select one") %>% # remove "select one" under education
filter(!(wharton == "Yes" & sirius == "No")) %>% # remove inconsistent answers
filter(age != "female") %>% # remove incorrect entry
filter(age != "223") %>% # remove incorrect entry
filter(age != "4") %>% # remove incorrect entry
mutate(age = recode(age, "Eighteen (18)" = "18")) %>% # change "Eighteen (18)" to "18" under age
mutate(age = recode(age, "27`" = "27")) # change "27`" to "27" under age
results <- droplevels(results) # drop levels in the factors after removing data
summary(results)
summary(results$age) # to see the (Other) levels under age and change the incorrect data entries accordingly
# convert character to integer for datatype of age and worktime for calculation
results$age = as.integer(as.character(results$age))
results$worktime <- as.integer(as.character(results$worktime))
skimr::skim(results)
summary(results)
# distribution of age, education, and income in our sample -- histograms
age <- ggplot(results) +
geom_histogram(aes(x = age), bins = 7, fill = "darkblue") +
labs( title = "Histogram of Age", x = "Age" , y = "Frequency")
education <- ggplot(results) +
geom_histogram(aes(x = education), stat="count", fill = "blue") +
labs( title = "Histogram of Education", x = "Education" , y = "Frequency") +
theme(axis.text.x = element_text(angle = -60))
college_prop = (611+745+177)/1725
income <- ggplot(results) +
geom_histogram(aes(x = income), stat="count", fill = "lightblue") +
labs( title = "Histogram of Income", x = "Income" , y = "Frequency") +
theme(axis.text.x = element_text(angle = -60))
grid.arrange(age, education, income, ncol = 3)
# scatterplot on sirius and wharton
sirius <- results %>%
ggplot(aes(x = sirius, y = age)) +
# geometric options with aes mapping:
# color, size, alpha as a function of a variable
geom_point(aes(color = education), size = 3) +
labs(title = "Age vs. Listens to Sirius or no",
x = "Listens to Sirius?",
y = "Age") +
theme_bw() +
theme(legend.position = c(0.5, 0.5))
wharton <- results %>%
ggplot(aes(x = wharton, y = age)) +
# geometric options with aes mapping:
# color, size, alpha as a function of a variable
geom_point(aes(color = education), size = 3) +
labs(title = "Age vs. Listens to Wharton or no",
x = "Listens to Wharton?",
y = "Age") +
theme_bw() +
theme(legend.position = c(0.5, 0.5))
grid.arrange(sirius, wharton, ncol = 2)
View(survey_results)
View(results)
education <- ggplot(results) +
mutate(education = fct_relevel(education,
"Less than 12 years; no high school diploma", "High school graduate (or equivalent)", "Some college, no diploma; or Associate’s degree", "Bachelor’s degree or other 4-year degree", "Graduate or professional degree", "Other"))
education <- results %>%
mutate(education = fct_relevel(education,
"Less than 12 years; no high school diploma", "High school graduate (or equivalent)", "Some college, no diploma; or Associate’s degree", "Bachelor’s degree or other 4-year degree", "Graduate or professional degree", "Other")) %>% ggplot(results) +
geom_histogram(aes(x = education), stat="count", fill = "blue") +
labs( title = "Histogram of Education", x = "Education" , y = "Frequency") +
theme(axis.text.x = element_text(angle = -60))
education <- results %>%
mutate(education = fct_relevel(education, "Less than 12 years; no high school diploma", "High school graduate (or equivalent)", "Some college, no diploma; or Associate’s degree", "Bachelor’s degree or other 4-year degree", "Graduate or professional degree", "Other")) %>%
ggplot(results) +
geom_histogram(aes(x = education), stat="count", fill = "blue") +
labs( title = "Histogram of Education", x = "Education" , y = "Frequency") +
theme(axis.text.x = element_text(angle = -60))
education <- results %>%
mutate(education = fct_relevel(education, "Less than 12 years; no high school diploma", "High school graduate (or equivalent)", "Some college, no diploma; or Associate’s degree", "Bachelor’s degree or other 4-year degree", "Graduate or professional degree", "Other")) %>%
ggplot() +
geom_histogram(aes(x = education), stat="count", fill = "blue") +
labs(title = "Histogram of Education", x = "Education" , y = "Frequency") +
theme(axis.text.x = element_text(angle = -60))
education
income
income <- results %>%
mutate(income = fct_relevel("Less than $15,000", "$15,000 - $30,000", "$30,000 - $50,000", "$50,000 - $75,000", "$75,000 - $150,000", "Above $150,000")) %>%
ggplot() +
geom_histogram(aes(x = income), stat="count", fill = "lightblue") +
labs( title = "Histogram of Income", x = "Income" , y = "Frequency") +
theme(axis.text.x = element_text(angle = -60))
income
results$income
table(results$income)
summary(results$income)
income <- results %>%
mutate(income = fct_relevel("Less than $15,000", "$15,000-$30,000", "$30,000 - $50,000", "$50,000 - $75,000", "$75,000 - $150,000", "Above $150,000")) %>%
ggplot() +
geom_histogram(aes(x = income), stat="count", fill = "lightblue") +
labs( title = "Histogram of Income", x = "Income" , y = "Frequency") +
theme(axis.text.x = element_text(angle = -60))
income <- results %>%
mutate(income = fct_relevel("Less than $15,000", "$15,000 - $30,000 ", "$30,000 - $50,000 ", "$50,000 - $75,000 ", "$75,000 - $150,000 ", "Above $150,000 ")) %>%
ggplot() +
geom_histogram(aes(x = income), stat="count", fill = "lightblue") +
labs( title = "Histogram of Income", x = "Income" , y = "Frequency") +
theme(axis.text.x = element_text(angle = -60))
as.character(results$income)
results <- as.character(results$income)
results <- str_squish(results$income)
survey_results <- read.csv("data/Survey_results_final.csv")
results <-
survey_results %>%
# select only the variables Age, Gender, Education Level, Household Income in 2013, Sirius Listener?, Wharton Listener? and Time used to finish the survey
select(Answer.Age, Answer.Gender, Answer.Education, Answer.HouseHoldIncome, Answer.Sirius.Radio, Answer.Wharton.Radio, WorkTimeInSeconds) %>%
# change the variable names to be "age", "gender", "education", "income", "sirius", "wharton", "worktime"
rename(age = Answer.Age, gender = Answer.Gender, education = Answer.Education, income = Answer.HouseHoldIncome, sirius = Answer.Sirius.Radio, wharton = Answer.Wharton.Radio, worktime = WorkTimeInSeconds) %>%
# omit any row with NA because they will introduce noise into our data
na.omit()
names(results)
str(results)
# get datatype of each column so we can convert them back to original datatype later on
print(class(results$age))
print(class(results$gender))
print(class(results$education))
print(class(results$income))
print(class(results$sirius))
print(class(results$wharton))
print(class(results$worktime))
# we want to see what kinds of results are available for each variable
results$age <- as.factor(results$age)
results$gender <- as.factor(results$gender)
results$education <- as.factor(results$education)
results$income <- as.factor(results$income)
results$sirius <- as.factor(results$sirius)
results$wharton <- as.factor(results$wharton)
results$worktime <- as.factor(results$worktime)
summary(results)
results %>%
# view rows with incomplete data
filter(age == "" | gender == "" | education == "" | income == "" | sirius == "" | wharton == "" | worktime == "")
results <- results %>%
# keep only the rows that are not empty
filter(age != "", gender != "", education != "", income != "", sirius != "", wharton != "", worktime != "") %>%
# remove rows with incorrect data entry
filter(education != "select one") %>% # remove "select one" under education
filter(!(wharton == "Yes" & sirius == "No")) %>% # remove inconsistent answers
filter(age != "female") %>% # remove incorrect entry
filter(age != "223") %>% # remove incorrect entry
filter(age != "4") %>% # remove incorrect entry
mutate(age = recode(age, "Eighteen (18)" = "18")) %>% # change "Eighteen (18)" to "18" under age
mutate(age = recode(age, "27`" = "27")) # change "27`" to "27" under age
results <- droplevels(results) # drop levels in the factors after removing data
summary(results)
summary(results$age) # to see the (Other) levels under age and change the incorrect data entries accordingly
results$income <- as.character(results$income)
results$income <- str_squish(results$income)
results$income <- as.factor(results$income)
View(results)
income <- results %>%
mutate(income = fct_relevel("Less than $15,000", "$15,000 - $30,000", "$30,000 - $50,000", "$50,000 - $75,000", "$75,000 - $150,000", "Above $150,000")) %>%
ggplot() +
geom_histogram(aes(x = income), stat="count", fill = "lightblue") +
labs( title = "Histogram of Income", x = "Income" , y = "Frequency") +
theme(axis.text.x = element_text(angle = -60))
results$income <- as.character(results$income)
results$income <- str_trim(results$income)
results$income <- as.factor(results$income)
income <- results %>%
mutate(income = fct_relevel("Less than $15,000", "$15,000 - $30,000", "$30,000 - $50,000", "$50,000 - $75,000", "$75,000 - $150,000", "Above $150,000")) %>%
ggplot() +
geom_histogram(aes(x = income), stat="count", fill = "lightblue") +
labs( title = "Histogram of Income", x = "Income" , y = "Frequency") +
theme(axis.text.x = element_text(angle = -60))
income <- results %>%
mutate(income = fct_relevel(income, "Less than $15,000", "$15,000 - $30,000", "$30,000 - $50,000", "$50,000 - $75,000", "$75,000 - $150,000", "Above $150,000")) %>%
ggplot() +
geom_histogram(aes(x = income), stat="count", fill = "lightblue") +
labs( title = "Histogram of Income", x = "Income" , y = "Frequency") +
theme(axis.text.x = element_text(angle = -60))
income
grid.arrange(age, education, income, ncol = 3)
grid.arrange(age, education, income, ncol = 2, nrow = 2)
grid.arrange(age, education, income, nrow = 3)
grid.arrange(age, education, income, ncol = 3)
age <- ggplot(results) +
geom_histogram(aes(x = age), bins = 7, fill = "darkblue") +
labs( title = "Age of Respondents", x = "Age" , y = "Frequency")
education <- results %>%
mutate(education = fct_relevel(education, "Less than 12 years; no high school diploma", "High school graduate (or equivalent)", "Some college, no diploma; or Associate’s degree", "Bachelor’s degree or other 4-year degree", "Graduate or professional degree", "Other")) %>%
ggplot() +
geom_histogram(aes(x = education), stat="count", fill = "blue") +
labs(title = "Education Level of Respondents", x = "Education" , y = "Frequency") +
theme(axis.text.x = element_text(angle = -60))
college_prop = (611+745+177)/1725
income <- results %>%
mutate(income = fct_relevel(income, "Less than $15,000", "$15,000 - $30,000", "$30,000 - $50,000", "$50,000 - $75,000", "$75,000 - $150,000", "Above $150,000")) %>%
ggplot() +
geom_histogram(aes(x = income), stat="count", fill = "lightblue") +
labs( title = "Income Level of Respondents", x = "Income" , y = "Frequency") +
theme(axis.text.x = element_text(angle = -60))
age
education <- results %>%
mutate(education = fct_relevel(education, "Less than 12 years; no high school diploma", "High school graduate (or equivalent)", "Some college, no diploma; or Associate’s degree", "Bachelor’s degree or other 4-year degree", "Graduate or professional degree", "Other")) %>%
ggplot() +
geom_histogram(aes(x = education), stat="count", fill = "blue") +
labs(title = "Education Level of Respondents", x = "Education" , y = "Frequency") +
theme(axis.text.x = element_text(angle = -60))
education
age
wharton_prop <-
results %>%
filter(wharton == "Yes") %>%
nrow()
sirius_prop <-
results %>%
filter(sirius == "Yes") %>%
nrow()
p <- wharton_prop/sirius_prop
p
percent <- p*100
percent
library(dplyr)
library(ggplot2)
library(ggpubr)
datapay_wide <- read.csv("/Users/ruolanli/Downloads/MLPayData_Total.csv")
datapay_wide <- read.csv("data/MLPayData_Total.csv")
datapay_long <- read.csv("data/baseball.csv")
#plot variable payroll directly
p1 <- datapay_long %>%
ggplot(aes(x = payroll)) +
geom_density()
#plot log transformed payroll
p2 <- datapay_long %>%
ggplot(aes(x = log(payroll))) +
geom_density()
ggarrange(p1,p2)
#log transform difference
datapay_long = datapay_long %>%
group_by(team) %>%
mutate(diff_log = log(payroll) - log(lag(payroll)))
head(datapay_long)
datapay_long = datapay_long %>%
select(team, year, diff_log, win_pct)
head(datapay_long)
payroll <- datapay_long %>%
group_by(team) %>%
filter(year %in% c(2010:2014)) %>%
summarise(diff_sum = sum(diff_log)) %>% #log(2014)-log(2010) = sum of log(2014)-log(2013)+log(2013)-log(2012)...
arrange(desc(diff_sum))
head(payroll)
win <- datapay_wide %>%
rename("team" = names(.)[1]) %>%
select(team, paste0("X", c(2014,2010),".pct")) %>%
group_by(team) %>%
mutate(pct = X2014.pct - X2010.pct) %>% #difference of percentage
arrange(desc(pct))
head(win)
data_final <- datapay_long %>%
group_by(team) %>%
summarise(payroll_mean = mean(diff_log, na.rm = TRUE),
win_pct_mean = mean(win_pct))
data_final %>%
ggplot(aes(x = payroll_mean, y = win_pct_mean)) +
geom_point(color = "blue", size = 3) +
geom_text(aes(label = team), size = 3) +
labs(title = "Win Percentage vs. Log Increase in Payroll",
x = "Log_increase_in_payroll",
y = "Win_pct")
#Least Squared Lines
data_final %>%
ggplot(aes(x = payroll_mean, y = win_pct_mean))+
geom_point(size = 3)+
geom_smooth(method = "lm", formula = y~x, color = "blue")+
labs(title = "Win Percentage vs. Log Increase in Payroll",
x = "Log Increase in Payroll",
y = "Proportion of Wins")+
theme_bw()
datapay_long %>%
ggplot(aes(x=diff_log, y=win_pct, group = year, color=team)) +
geom_point()+
geom_smooth(method="lm", formula=y~x, se=F,color = "red")+
facet_wrap(~year) +
theme_bw() +
theme(legend.position = 0)
#linear relationship
fit1 = lm(win_pct_mean~payroll_mean, data = data_final)
summary(fit1)
fit2 = lm(win_pct ~ diff_log+year+year*diff_log, data = datapay_long)
summary(fit2)
#correaltion
cor(data_final$payroll_mean, data_final$win_pct_mean)
survey_results <- read.csv("data/Survey_results_final.csv")
results <-
survey_results %>%
# select only the variables Age, Gender, Education Level, Household Income in 2013, Sirius Listener?, Wharton Listener? and Time used to finish the survey
select(Answer.Age, Answer.Gender, Answer.Education, Answer.HouseHoldIncome, Answer.Sirius.Radio, Answer.Wharton.Radio, WorkTimeInSeconds) %>%
# change the variable names to be "age", "gender", "education", "income", "sirius", "wharton", "worktime"
rename(age = Answer.Age, gender = Answer.Gender, education = Answer.Education, income = Answer.HouseHoldIncome, sirius = Answer.Sirius.Radio, wharton = Answer.Wharton.Radio, worktime = WorkTimeInSeconds) %>%
# omit any row with NA because they will introduce noise into our data
na.omit()
names(results)
str(results)
# get datatype of each column so we can convert them back to original datatype later on
print(class(results$age))
print(class(results$gender))
print(class(results$education))
print(class(results$income))
print(class(results$sirius))
print(class(results$wharton))
print(class(results$worktime))
survey_results <- read.csv("data/Survey_results_final.csv")
results <- survey_results %>%
# select only the variables Age, Gender, Education Level, Household Income in 2013, Sirius Listener?, Wharton Listener? and Time used to finish the survey
select(Answer.Age, Answer.Gender, Answer.Education, Answer.HouseHoldIncome, Answer.Sirius.Radio, Answer.Wharton.Radio, WorkTimeInSeconds) %>%
# change the variable names to be "age", "gender", "education", "income", "sirius", "wharton", "worktime"
rename(age = Answer.Age, gender = Answer.Gender, education = Answer.Education, income = Answer.HouseHoldIncome, sirius = Answer.Sirius.Radio, wharton = Answer.Wharton.Radio, worktime = WorkTimeInSeconds) %>%
# omit any row with NA because they will introduce noise into our data
na.omit()
names(results)
str(results)
# get datatype of each column so we can convert them back to original datatype later on
print(class(results$age))
print(class(results$gender))
print(class(results$education))
print(class(results$income))
print(class(results$sirius))
print(class(results$wharton))
print(class(results$worktime))
survey_results <- read.csv("data/Survey_results_final.csv")
results <- survey_results %>%
# select only the variables Age, Gender, Education Level, Household Income in 2013, Sirius Listener?, Wharton Listener? and Time used to finish the survey
select(Answer.Age, Answer.Gender, Answer.Education, Answer.HouseHoldIncome, Answer.Sirius.Radio, Answer.Wharton.Radio, WorkTimeInSeconds) %>%
# change the variable names to be "age", "gender", "education", "income", "sirius", "wharton", "worktime"
rename(age = Answer.Age, gender = Answer.Gender, education = Answer.Education, income = Answer.HouseHoldIncome, sirius = Answer.Sirius.Radio, wharton = Answer.Wharton.Radio, worktime = WorkTimeInSeconds) %>%
# omit any row with NA because they will introduce noise into our data
na.omit()
names(results)
str(results)
# get datatype of each column so we can convert them back to original datatype later on
print(class(results$age))
print(class(results$gender))
print(class(results$education))
print(class(results$income))
print(class(results$sirius))
print(class(results$wharton))
print(class(results$worktime))
View(survey_results)
setwd("C:/Users/nighki01/Box Sync/Course Materials/2023 Spring_Data Mining/Homework 1/Homework 1")
survey_results <- read.csv("C:\Users\nighki01\Box Sync\Course Materials\2023 Spring_Data Mining\Homework 1\datadata/Survey_results_final.csv")
survey_results <- read.csv("Users/nighki01/Box Sync/Course Materials/2023 Spring_Data Mining/Homework 1/datadata/Survey_results_final.csv")
survey_results <- read.csv("Users/nighki01/Box Sync/Course Materials/2023 Spring_Data Mining/Homework 1/data/Survey_results_final.csv")
women <- read_xlsx("C:/Users/nighki01/Box Sync/Course Materials/2023 Spring_Data Mining/Homework 1/data/WomenData_06_16.xlsx")
knitr::opts_chunk$set(echo = TRUE, fig.width=8, fig.height=4)
options(scipen = 0, digits = 3)  # controls base R output
if(!require('pacman')) {
install.packages('pacman')
}
pacman::p_load(ggplot2, dplyr, tidyverse, gridExtra, ggrepel, plotly, skimr, tidytext, readxl)
# install a package if it does not exist already and put the package in the path (library)
# dplyr, ggplot2,tidyr
# install.packages('ggplot2')
#library(ggplot2)
women <- read_xlsx("C:/Users/nighki01/Box Sync/Course Materials/2023 Spring_Data Mining/Homework 1/data/WomenData_06_16.xlsx")
survey_results <- read.csv("Users/nighki01/Box Sync/Course Materials/2023 Spring_Data Mining/Homework 1/data/Survey_results_final.csv", header=T, stringsAsFactors = FALSE)
survey_results <- read.csv("data/Survey_results_final.csv", header=T, stringsAsFactors = FALSE)
results <- survey_results %>%
# select only the variables Age, Gender, Education Level, Household Income in 2013, Sirius Listener?, Wharton Listener? and Time used to finish the survey
select(Answer.Age, Answer.Gender, Answer.Education, Answer.HouseHoldIncome, Answer.Sirius.Radio, Answer.Wharton.Radio, WorkTimeInSeconds) %>%
# change the variable names to be "age", "gender", "education", "income", "sirius", "wharton", "worktime"
rename(age = Answer.Age, gender = Answer.Gender, education = Answer.Education, income = Answer.HouseHoldIncome, sirius = Answer.Sirius.Radio, wharton = Answer.Wharton.Radio, worktime = WorkTimeInSeconds) %>%
# omit any row with NA because they will introduce noise into our data
na.omit()
names(results)
str(results)
# get datatype of each column so we can convert them back to original datatype later on
print(class(results$age))
print(class(results$gender))
print(class(results$education))
print(class(results$income))
print(class(results$sirius))
print(class(results$wharton))
print(class(results$worktime))
getwd()
setwd("C:/Users/nighki01/Box Sync/Course Materials/2023 Spring_Data Mining/Homework 1")
setwd("~/Box Sync/Course Materials/2023 Spring_Data Mining/Homework")
setwd(/Box Sync/Course Materials/2023 Spring_Data Mining/Homework)
setwd(Box Sync/Course Materials/2023 Spring_Data Mining/Homework)
setwd("C:/Users/nighki01/Box Sync/Course Materials/2023 Spring_Data Mining/Homework")
setwd("C:/Users/nighki01/Box Sync/Course Materials/2023 Spring_Data Mining/Homework")
