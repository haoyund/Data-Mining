stargazer(regress_interaction, type = output_format, title = "Table 3.3: Regression Model with a Year*Horsepower Interaction", ci = TRUE)
Auto <- Auto %>% mutate(mpg_log = log(mpg), mpg_sqrt = sqrt(mpg), year_center = year-76, weight_center = weight-2978, cylinders_center = cylinders-5.47)
final_model <- lm(data=Auto, mpg ~ weight_center*cylinders_center + year_center*origin)
stargazer(final_model, type = output_format, title = "Table 3.6: Model for Predicting MPG", ci = TRUE)
#Linearity and homoscedasticity
plot(final_model$fitted, final_model$residuals,
pch  = 16,
main = "Figure 3.5: Residual plot",
xlab = "Fitted Values",
ylab = "Residuals")
abline(h=0, lwd=4, col="red")
#Normality
qqnorm(final_model$residuals,
main = "Figure 3.6: Q-Q Plot")
qqline(final_model$residuals, lwd=4, col="blue")
newcar <- Auto[1, ]
View(newcar)
newcar <- Auto[1, ]
newcar[1] <- "NA"
newcar[3] <- 350
newcar[4] <- 260
newcar[5] <- 4000
newcar[6] <- "NA"
newcar[7] <- 83
newcar[9:16] <- "NA"
newcar[1] <- .
predict(final_model, newcar,  interval = "predict", se.fit = TRUE)
newcar <- newcar %>% mutate(year_center = year-76, weight_center = weight-2978, cylinders_center = cylinders-5.47)
predict(final_model, newcar,  interval = "predict", se.fit = TRUE)
# Generates a vector of size 40 with equally spaced values between 0 and 1, inclusive
x <- seq(0, 1, length = 40)
anova(regression_cylinder_cont, regression_cylinder_cat)
regression_cylinder_cont <- lm(data = Auto, mpg ~ cylinders)
summary(regression_cylinder_cont)
stargazer(regression_cylinder_cont, type = output_format, title = "Table 3.4: Regression Model Treating Cylinders as Continuous", ci = TRUE)
#Creating a factor version of cylinders
Auto$cylinders_fact <- as.factor(Auto$cylinders)
#Running regression
regression_cylinder_cat <- lm(data = Auto, mpg ~ cylinders_fact)
summary(regression_cylinder_cat)
stargazer(regression_cylinder_cat, type = output_format, title = "Table 3.5: Regression Model Treating Cylinders as Categorical", ci = TRUE)
anova(regression_cylinder_cont, regression_cylinder_cat)
y <- 1 + 1.2*x + rnorm(40, 0, 2)
linear_data <- data.frame(x, y)
linear_plot <- ggplot(data = linear_data, aes(c(x="x", y="y"))) +
geom_point()
linear_plot
View(linear_data)
linear_plot <- ggplot(data = linear_data, aes(x=x, y=y)) +
geom_point()
linear_plot
linear_plot <- ggplot(data = linear_data, aes(x=x, y=y)) +
geom_point() +
labs(title = "Figure 4.1: ", subtitle = "Scatter plot of x and y for the equation y = 1 + 1.2x + $\boldsymbol{\varepsilon}$")
linear_plot
linear_plot <- ggplot(data = linear_data, aes(x=x, y=y)) +
geom_point() +
labs(title = "Figure 4.1: ", subtitle = "Scatter plot of x and y for the equation y = 1 + 1.2x + epsilon")
linear_plot
linear <- lm(y ~ x)
summary(linear)
linear_plot <- ggplot(data = linear_data, aes(x=x, y=y)) +
geom_point() + geom_line(y=1+1.2*x) +
labs(title = "Figure 4.1: ", subtitle = "Scatter plot of x and y for the equation y = 1 + 1.2x + epsilon")
linear_plot
linear_plot <- ggplot(data = linear_data, aes(x=x, y=y)) +
geom_point() + geom_line(y=1+1.2*x, color=blue) + geom_line(data=linear_data, y~x, color=red) +
labs(title = "Figure 4.1: ", subtitle = "Scatter plot of x and y for the equation y = 1 + 1.2x + epsilon")
linear_plot <- ggplot(data = linear_data, aes(x=x, y=y)) +
geom_point() + geom_line(y=1+1.2*x, color="blue") + geom_line(data=linear_data, y~x, color="red") +
labs(title = "Figure 4.1: ", subtitle = "Scatter plot of x and y for the equation y = 1 + 1.2x + epsilon")
linear_plot <- ggplot(data = linear_data, aes(x=x, y=y)) +
geom_point() + geom_line(y=1+1.2*x, color="blue") + geom_line(y~x, color="red") +
labs(title = "Figure 4.1: ", subtitle = "Scatter plot of x and y for the equation y = 1 + 1.2x + epsilon")
linear_plot <- ggplot(data = linear_data, aes(x=x, y=y)) +
geom_point() + geom_line(y=1+1.2*x, color="blue") + geom_line(lm(y~x), color="red") +
labs(title = "Figure 4.1: ", subtitle = "Scatter plot of x and y for the equation y = 1 + 1.2x + epsilon")
linear_plot <- ggplot(data = linear_data, aes(x=x, y=y)) +
geom_point() + geom_line(y=1+1.2*x, color="blue") + geom_smooth(method=lm, formula=y~x, color="red") +
labs(title = "Figure 4.1: ", subtitle = "Scatter plot of x and y for the equation y = 1 + 1.2x + epsilon")
linear_plot
linear_plot <- ggplot(data = linear_data, aes(x=x, y=y)) +
geom_point() + geom_line(y=1+1.2*x, color="blue") + geom_smooth(method=lm, formula=y~x, color="red", ci=FALSE) +
labs(title = "Figure 4.1: ", subtitle = "Scatter plot of x and y for the equation y = 1 + 1.2x + epsilon")
linear_plot
linear_plot <- ggplot(data = linear_data, aes(x=x, y=y)) +
geom_point() + geom_line(y=1+1.2*x, color="blue") + geom_smooth(method=lm, formula=y~x, color="red", se=FALSE) +
labs(title = "Figure 4.1: ", subtitle = "Scatter plot of x and y for the equation y = 1 + 1.2x + epsilon")
linear_plot
linear_plot <- ggplot(data = linear_data, aes(x=x, y=y)) +
geom_point() + geom_line(y=1+1.2*x, color="blue") + geom_smooth(method=lm, formula=y~x, color="red", se=FALSE) +
labs(title = "Figure 4.1: ", subtitle = "Scatter plot of x and y for the equation y = 1 + 1.2x + epsilon", caption = "Blue line represents a perfect linear fit, red line represents the actual fit")
linear_plot
sigma <- 2
n <- length(y)
sd_b1 <- sqrt(sigma^2 /((n-1)* (sd(x))^2))  # we will estimate sigma by rse in real life.
sd_b1
summary(linear)
linear_plot <- ggplot(data = linear_data, aes(x=x, y=y)) +
geom_point() +
labs(title = "Figure 4.1: ", subtitle = "Scatter plot of x and y for the equation y = 1 + 1.2x + epsilon")
linear_plot
linear_plot_2 <- ggplot(data = linear_data, aes(x=x, y=y)) +
geom_point() + geom_line(y=1+1.2*x, color="blue") + geom_smooth(method=lm, formula=y~x, color="red", se=FALSE) +
labs(title = "Figure 4.1: ", subtitle = "Scatter plot of x and y for the equation y = 1 + 1.2x + epsilon", caption = "Blue line represents a perfect linear fit, red line represents the actual fit")
linear_plot_2
linear$coefficients
confint(linear, 'x', level=0.95)
plot(linear$fitted, linear$residuals,
pch  = 16,
ylim = c(-8, 8),
main = "residual plot")
abline(h=0, lwd=4, col="red")
plot(linear$fitted, linear$residuals,
pch  = 16,
ylim = c(-8, 8),
main = "Figure 4.2: Residual plot")
abline(h=0, lwd=4, col="red")
qqnorm(linear$residuals, ylim=c(-8, 8), main = "Figure 4.3: Q-Q plot")
qqline(linear$residuals, lwd=4, col="blue")
# Inializing variables. Note b_1, upper_ci, lower_ci are vectors
x <- seq(0, 1, length = 40)
n_sim <- 100              # number of simulations
b1 <- 0                   # n_sim many LS estimates of beta_1 (=1.2). Initialize to 0 for now
upper_ci <- 0             # upper bound for beta_1. Initialize to 0 for now.
lower_ci <- 0             # lower bound for beta_1. Initialize to 0 for now.
t_star <- qt(0.975, 38)   # Food for thought: why 38 instead of 40? What is t_star?
# Perform the simulation
for (i in 1:n_sim){I l
# Inializing variables. Note b_1, upper_ci, lower_ci are vectors
x <- seq(0, 1, length = 40)
n_sim <- 100              # number of simulations
b1 <- 0                   # n_sim many LS estimates of beta_1 (=1.2). Initialize to 0 for now
upper_ci <- 0             # upper bound for beta_1. Initialize to 0 for now.
lower_ci <- 0             # lower bound for beta_1. Initialize to 0 for now.
t_star <- qt(0.975, 38)   # Food for thought: why 38 instead of 40? What is t_star?
# Perform the simulation
for (i in 1:n_sim){I
y <- 1 + 1.2 * x + rnorm(40, sd = 2)
lse <- lm(y ~ x)
lse_output <- summary(lse)$coefficients
se <- lse_output[2, 2]
b1[i] <- lse_output[2, 1]
upper_ci[i] <- b1[i] + t_star * se
lower_ci[i] <- b1[i] - t_star * se
}
results <- as.data.frame(cbind(se, b1, upper_ci, lower_ci))
# remove unecessary variables from our workspace
rm(se, b1, upper_ci, lower_ci, x, n_sim, b1, t_star, lse, lse_out)
# Inializing variables. Note b_1, upper_ci, lower_ci are vectors
x <- seq(0, 1, length = 40)
n_sim <- 100              # number of simulations
b1 <- 0                   # n_sim many LS estimates of beta_1 (=1.2). Initialize to 0 for now
upper_ci <- 0             # upper bound for beta_1. Initialize to 0 for now.
lower_ci <- 0             # lower bound for beta_1. Initialize to 0 for now.
t_star <- qt(0.975, 38)   # Food for thought: why 38 instead of 40? What is t_star?
# Perform the simulation
for (i in 1:n_sim){
y <- 1 + 1.2 * x + rnorm(40, sd = 2)
lse <- lm(y ~ x)
lse_output <- summary(lse)$coefficients
se <- lse_output[2, 2]
b1[i] <- lse_output[2, 1]
upper_ci[i] <- b1[i] + t_star * se
lower_ci[i] <- b1[i] - t_star * se
}
results <- as.data.frame(cbind(se, b1, upper_ci, lower_ci))
# remove unecessary variables from our workspace
rm(se, b1, upper_ci, lower_ci, x, n_sim, b1, t_star, lse, lse_out)
results
results <- as.data.frame(cbind(se, b1, upper_ci, lower_ci))
# Inializing variables. Note b_1, upper_ci, lower_ci are vectors
x <- seq(0, 1, length = 40)
n_sim <- 100              # number of simulations
b1 <- 0                   # n_sim many LS estimates of beta_1 (=1.2). Initialize to 0 for now
upper_ci <- 0             # upper bound for beta_1. Initialize to 0 for now.
lower_ci <- 0             # lower bound for beta_1. Initialize to 0 for now.
t_star <- qt(0.975, 38)   # Food for thought: why 38 instead of 40? What is t_star?
# Perform the simulation
for (i in 1:n_sim){
y <- 1 + 1.2 * x + rnorm(40, sd = 2)
lse <- lm(y ~ x)
lse_output <- summary(lse)$coefficients
se <- lse_output[2, 2]
b1[i] <- lse_output[2, 1]
upper_ci[i] <- b1[i] + t_star * se
lower_ci[i] <- b1[i] - t_star * se
}
results <- as.data.frame(cbind(se, b1, upper_ci, lower_ci))
View(results)
summary(results$b1)
set.seed(1)
y <- 1 + 1.2*x + rnorm(40, sd = 2)
linear_data <- data.frame(x, y)
linear_plot <- ggplot(data = linear_data, aes(x=x, y=y)) +
geom_point() +
labs(title = "Figure 4.1: ", subtitle = "Scatter plot of x and y for the equation y = 1 + 1.2x + epsilon")
linear_plot
linear <- lm(y ~ x)
summary(linear)
sigma <- 2
n <- length(y)
sd_b1 <- sqrt(sigma^2 /((n-1)* (sd(x))^2))  # we will estimate sigma by rse in real life.
sd_b1
summary(linear)
confint(linear, 'x', level=0.95)
linear_plot_2 <- ggplot(data = linear_data, aes(x=x, y=y)) +
geom_point() + geom_line(y=1+1.2*x, color="blue") + geom_smooth(method=lm, formula=y~x, color="red", se=FALSE) +
labs(title = "Figure 4.1: ", subtitle = "Scatter plot of x and y for the equation y = 1 + 1.2x + epsilon", caption = "Blue line represents a perfect linear fit, red line represents the actual fit")
linear_plot_2
plot(linear$fitted, linear$residuals,
pch  = 16,
ylim = c(-8, 8),
main = "Figure 4.2: Residual plot")
abline(h=0, lwd=4, col="red")
qqnorm(linear$residuals, ylim=c(-8, 8), main = "Figure 4.3: Q-Q plot")
qqline(linear$residuals, lwd=4, col="blue")
summarise(results$b1)
summary(results$b1)
summary(results$b1)
sd(results$b1)
View(results)
plot <- ggplot(data=results) +
geom_line(data=results, aes(x=upper_ci))
plot
plot <- ggplot(data=results) +
geom_line(data=results, aes(y=upper_ci))
plot
results$num <- seq(1,100)
plot <- ggplot(data=results) +
geom_line(data=results, aes(x=num, y=upper_ci))
plot
plot <- ggplot(data=results) +
geom_line(data=results, aes(x=num, y=upper_ci)) +
geom_line(data=results, aes(x=num, y=lower_ci)) +
geom_line(y=1.2)
plot
plot <- ggplot(data=results) +
geom_line(data=results, aes(x=num, y=upper_ci)) +
geom_line(data=results, aes(x=num, y=lower_ci)) +
geom_line(aes(x=num, y=1.2))
plot
results <- arrange(upper_ci)
results <- arrange(results, upper_ci)
results$num <- seq(1,100)
plot <- ggplot(data=results) +
geom_line(data=results, aes(x=num, y=upper_ci)) +
geom_line(data=results, aes(x=num, y=lower_ci)) +
geom_line(aes(x=num, y=1.2))
plot
plot <- ggplot(data=results) +
geom_line(data=results, aes(x=num, y=upper_ci)) +
geom_line(data=results, aes(x=num, y=lower_ci)) +
geom_line(aes(x=num, y=1.2), color="blue")
plot
plot <- ggplot(data=results) +
geom_line(data=results, aes(x=num, y=upper_ci)) +
geom_line(data=results, aes(x=num, y=lower_ci)) +
geom_line(aes(x=num, y=1.2), color="blue") +
labs(title = "Figure 4.3: ", subtitle = "Graph of 95% CIs for each simulation", x = "Value of Beta1", y = "Simulation number") +
geom_label_repel(aes(label = label),
nudge_x = 1,
na.rm = TRUE)
pacman::p_load(ISLR, tidyverse, data.table, stargazer, broom, ggrepel)
plot <- ggplot(data=results) +
geom_line(data=results, aes(x=num, y=upper_ci)) +
geom_line(data=results, aes(x=num, y=lower_ci)) +
geom_line(aes(x=num, y=1.2), color="blue") +
labs(title = "Figure 4.3: ", subtitle = "Graph of 95% CIs for each simulation", x = "Value of Beta1", y = "Simulation number") +
geom_label_repel(aes(label = label),
nudge_x = 1,
na.rm = TRUE)
plot
plot <- ggplot(data=results) +
geom_line(data=results, aes(x=num, y=upper_ci)) +
geom_line(data=results, aes(x=num, y=lower_ci)) +
geom_line(aes(x=num, y=1.2), color="blue") +
labs(title = "Figure 4.3: ", subtitle = "Graph of 95% CIs for each simulation", x = "Value of Beta1", y = "Simulation number") +
geom_label_repel(aes(label = c("Upper CI", "Actual B1", "Lower CI")),
nudge_x = 1,
na.rm = TRUE)
plot
plot <- ggplot(data=results) +
geom_line(data=results, aes(x=num, y=upper_ci)) +
geom_line(data=results, aes(x=num, y=lower_ci)) +
geom_line(aes(x=num, y=1.2), color="blue") +
labs(title = "Figure 4.3: ", subtitle = "Graph of 95% CIs for each simulation", x = "Value of Beta1", y = "Simulation number") +
geom_label_repel(aes(label = "Upper CI")),
plot <- ggplot(data=results) +
geom_line(data=results, aes(x=num, y=upper_ci)) +
geom_line(data=results, aes(x=num, y=lower_ci)) +
geom_line(aes(x=num, y=1.2), color="blue") +
labs(title = "Figure 4.3: ", subtitle = "Graph of 95% CIs for each simulation", x = "Value of Beta1", y = "Simulation number")
plot
plot <- ggplot(data=results) +
geom_line(data=results, aes(x=num, y=upper_ci)) +
geom_line(data=results, aes(x=num, y=lower_ci)) +
geom_line(aes(x=num, y=1.2), color="blue") +
labs(title = "Figure 4.3: ", subtitle = "Graph of 95% CIs for each simulation", y = "Value of Beta1", x = "Simulation number")
plot
results <- results %>% mutate(contains_beta = ifelse(upper_ci>1.2 & lower_ci<1.2, 1, 0))
table(results$contains_beta)
knitr::opts_chunk$set(echo = FALSE, fig.width=8, fig.height=4)
options(scipen = 0, digits = 3)  # controls base R output
# check if you have ISLR package, if not, install it
if(!require('pacman')) {install.packages('pacman')}
pacman::p_load(ISLR, tidyverse, data.table, stargazer, broom, ggrepel)
output_format <- ifelse(is.null(knitr::opts_knit$get("rmarkdown.pandoc.to")),
"text", knitr::opts_knit$get("rmarkdown.pandoc.to"))
x_patient <- fread("data/brca_x_patient.csv")
brca <- fread("data/brca_subtype.csv")
brca <- fread("data/brca_subtype.csv")
dim(brca)
names(brca)[1:20]
table(brca$BRCA_Subtype_PAM50)
brca$BRCA_Subtype_PAM50 <- as.factor(brca$BRCA_Subtype_PAM50)
# get the sub-type information
brca_subtype <- brca$BRCA_Subtype_PAM50
brca <- brca[,-1]
num_gene <- ncol(brca)
# randomly select 10 gene
set.seed(5)
sample_idx <- sample(num_gene, 5)
# plot count number histogram for each gene
brca %>%
select(all_of(sample_idx)) %>%      # select column by index
pivot_longer(cols = everything()) %>%     # for facet(0)
ggplot(aes(x = value, y = ..density..)) +
geom_histogram(aes(fill = name)) +
facet_wrap(~name, scales = "free") +
theme_bw() +
theme(legend.position = "none")
num_gene <- ncol(brca)
# randomly select 10 gene
set.seed(5)
sample_idx <- sample(num_gene, 5)
# plot count number histogram for each gene
brca %>%
select(all_of(sample_idx)) %>%      # select column by index
pivot_longer(cols = everything()) %>%     # for facet(0)
ggplot(aes(x = value, y = ..density..)) +
geom_histogram(aes(fill = name)) +
facet_wrap(~name, scales = "free") +
theme_bw() +
theme(legend.position = "none")
# remove genes with 0 counts
sel_cols <- which(colSums(abs(brca)) != 0)
brca_sub <- brca[, sel_cols, with=F]
dim(brca_sub)
# log
brca_sub <- log2(as.matrix(brca_sub+1e-10))
brca_sub_kmeans <- kmeans(x = brca_sub, 4)
table(brca_subtype, brca_sub_kmeans$cluster)
# center and scale the data
brca_sub_scaled_centered <- scale(as.matrix(brca_sub), center = T, scale = T)
svd_ret <- irlba::irlba(brca_sub_scaled_centered, nv = 10)
# Approximate the PVE
svd_var <- svd_ret$d^2/(nrow(brca_sub_scaled_centered)-1)
pve_apx <- svd_var/num_gene
plot(pve_apx, type="b", pch = 19, frame = FALSE)
pca_scaled <- prcomp(brca_sub, center = T, scale. = T)
pca_unscaled <- prcomp(brca_sub, center = T, scale. = F)
pca_scaled$rotation[, 1:2]
pca_unscaled$rotation[, 1:2]
p1 <- data.frame(
pc1 = pca_scaled$x[, 1],
pc2 = pca_scaled$x[, 2],
group = as.factor(brca_sub_kmeans$cluster)) %>%
ggplot(aes(x = pc1, y = pc2, col = group)) +
geom_point() +
ggtitle("Clustering over PC1 and PC2")
p2 <- data.frame(
pc1 = pca_unscaled$x[, 1],
pc2 = pca_unscaled$x[, 2],
group = as.factor(brca_sub_kmeans$cluster)) %>%
ggplot(aes(x = pc1, y = pc2, col = group)) +
geom_point() +
ggtitle("Clustering over PC1 and PC2")
gridExtra::grid.arrange(p1, p2)
# using plot
plot(pca_unscaled)
# using wss
set.seed(0)
# function to compute total within-cluster sum of square
wss <- function(df, k) {
kmeans(df, k, nstart = 10)$tot.withinss
}
k.values <- 2:15
wss_values <- sapply(k.values, function(k) kmeans(brca_sub, centers = k)$tot.withinss)
plot(k.values, wss_values,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
pca_unscaled_kmeans <- kmeans(pca_unscaled$x[, 1:4], centers = 4)
# color indicates the true cancer type
# shape indicates the cluster results
p3 <- data.table(x = pca_unscaled$x[,1],
y = pca_unscaled$x[,2],
col = as.factor(brca_subtype),
cl = as.factor(pca_unscaled_kmeans$cluster),
centers_x = pca_unscaled_kmeans$centers[,1],
centers_y = pca_unscaled_kmeans$centers[,2])  %>%
ggplot() +
geom_point(aes(x = x, y = y, col = col, shape = cl)) +
scale_color_manual(labels = c("Basal", "Her", "LumA", "LumB"),
values = scales::hue_pal()(4)) +
scale_shape_manual(labels = c("Clulster 1", "Cluster 2", "Cluster 3", "Cluster 4"),
values = c(4, 16, 12, 11)) +
geom_point(aes(x = centers_x,
y = centers_y, size = 2)) +
theme_bw() +
labs(color = "Cancer type", shape = "Cluster") +
xlab("PC1") +
ylab("PC2")
p3
p4 <- data.frame(x = pca_unscaled$x[,1],
y = pca_unscaled$x[,2],
col = as.factor(brca_sub_kmeans$cluster),
cl = as.factor(pca_unscaled_kmeans$cluster)) %>%
ggplot() +
geom_point(aes(x = x, y = y, col = col, shape = cl)) +
scale_color_manual(labels = c("Cluster 1 (full)", "Cluster 2 (full)", "Cluster 3 (full)", "Cluster 4 (full)"),
values = scales::hue_pal()(4)) +
scale_shape_manual(labels = c("PC cluster 1", "PC cluster 2", "PC cluster 3", "PC cluster 4"),
values = c(4, 16, 12, 11)) +
theme_bw() +
labs(color = "Cancer type", shape = "Cluster") +
xlab("PC1") +
ylab("PC2")
p4
x_patient <- fread("data/brca_x_patient.csv")
dim(x_patient) # row = people, col = genes
names(x_patient)[1:10]
# remove genes with 0 counts
sel_cols_x <- which(colSums(abs(x_patient)) != 0)
x_patient_sub <- x_patient[, sel_cols_x, with=F]
dim(x_patient_sub)
# log
x_patient_sub <- log2(as.matrix(x_patient_sub+1e-10))
# centered
x_centered <- prcomp(x_patient_sub, center = T, scale. = F)
# plots
p5 <- data.table(x = pca_ret_unscaled$x[,1],
y = pca_ret_unscaled$x[,2],
col = as.factor(brca_subtype),
cl = as.factor(pca_ret_unscaled_kmeans$cluster))  %>%
ggplot() +
geom_point(aes(x = x, y = y, col = col, shape = cl)) +
scale_color_manual(labels = c("Basal", "Her", "LumA", "LumB"),
values = scales::hue_pal()(4)) +
scale_shape_manual(labels = c("Clulster 1", "Cluster 2", "Cluster 3", "Cluster 4"),
values = c(4, 16, 12, 11)) +
theme_bw() +
labs(color = "Cancer type", shape = "Cluster", size = "Centroid") +
xlab("PC1") +
ylab("PC2")
x_patient <- fread("data/brca_x_patient.csv")
dim(x_patient) # row = people, col = genes
names(x_patient)[1:10]
# remove genes with 0 counts
sel_cols_x <- which(colSums(abs(x_patient)) != 0)
x_patient_sub <- x_patient[, sel_cols_x, with=F]
dim(x_patient_sub)
# log
x_patient_sub <- log2(as.matrix(x_patient_sub+1e-10))
# centered
x_centered <- prcomp(x_patient_sub, center = T, scale. = F)
# plots
p5 <- data.table(x = pca_unscaled$x[,1],
y = pca_unscaled$x[,2],
col = as.factor(brca_subtype),
cl = as.factor(pca_ret_unscaled_kmeans$cluster))  %>%
ggplot() +
geom_point(aes(x = x, y = y, col = col, shape = cl)) +
scale_color_manual(labels = c("Basal", "Her", "LumA", "LumB"),
values = scales::hue_pal()(4)) +
scale_shape_manual(labels = c("Clulster 1", "Cluster 2", "Cluster 3", "Cluster 4"),
values = c(4, 16, 12, 11)) +
theme_bw() +
labs(color = "Cancer type", shape = "Cluster", size = "Centroid") +
xlab("PC1") +
ylab("PC2")
p5 <- data.table(x = pca_unscaled$x[,1],
y = pca_unscaled$x[,2],
col = as.factor(brca_subtype),
cl = as.factor(pca_unscaled_kmeans$cluster))  %>%
ggplot() +
geom_point(aes(x = x, y = y, col = col, shape = cl)) +
scale_color_manual(labels = c("Basal", "Her", "LumA", "LumB"),
values = scales::hue_pal()(4)) +
scale_shape_manual(labels = c("Clulster 1", "Cluster 2", "Cluster 3", "Cluster 4"),
values = c(4, 16, 12, 11)) +
theme_bw() +
labs(color = "Cancer type", shape = "Cluster", size = "Centroid") +
xlab("PC1") +
ylab("PC2")
p5
knitr::opts_chunk$set(echo = FALSE, fig.width=8, fig.height=4)
options(scipen = 0, digits = 3)  # controls base R output
# check if you have ISLR package, if not, install it
if(!require('pacman')) {install.packages('pacman')}
pacman::p_load(ISLR, tidyverse, data.table, stargazer, broom, ggrepel)
output_format <- ifelse(is.null(knitr::opts_knit$get("rmarkdown.pandoc.to")),
"text", knitr::opts_knit$get("rmarkdown.pandoc.to"))
devtools::install_github("vqv/ggbiplot")
knitr::opts_chunk$set(echo = FALSE, fig.width=8, fig.height=4)
options(scipen = 0, digits = 3)  # controls base R output
# check if you have ISLR package, if not, install it
if(!require('pacman')) {install.packages('pacman')}
pacman::p_load(ISLR, tidyverse, data.table, stargazer, broom, ggrepel, devtools, htmltools)
output_format <- ifelse(is.null(knitr::opts_knit$get("rmarkdown.pandoc.to")),
"text", knitr::opts_knit$get("rmarkdown.pandoc.to"))
